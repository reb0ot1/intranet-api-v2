<?phpnamespace Employees\Controllers;use Employees\Config\DefaultParam;use Employees\Core\MVC\FileUploadInterface;use Employees\Services\AuthenticationServiceInterface;use Employees\Services\BenefitsServiceInterface;use Employees\Services\EncryptionServiceInterface;use Employees\Services\ImageFromBinServiceInterface;use Employees\Core\DataReturnInterface;class FilesController{    private $benefitsService;    private $encryptionService;    private $authenticationService;    private $binaryImage;    private $dataReturn;    private $fileUpload;    public function __construct(BenefitsServiceInterface $benefitsService,                                EncryptionServiceInterface $encryptionService,                                AuthenticationServiceInterface $authenticationService,                                ImageFromBinServiceInterface $binService,                                DataReturnInterface $dataReturn,                                FileUploadInterface $fileUpload                                )    {        $this->benefitsService = $benefitsService;        $this->encryptionService = $encryptionService;        $this->authenticationService = $authenticationService;        $this->binaryImage = $binService;        $this->dataReturn = $dataReturn;        $this->fileUpload = $fileUpload;    }    public function httpNewsImageUpload()    {            if ($this->authenticationService->isTokenCorrect()) {            $folder = explode("/",DefaultParam::NewsImageContainer)[1];                if (count($this->fileUpload->getFiles()) == 0) {                    return $this->dataReturn->errorResponse(400,"No file was sent.");                }                    try {                        $uploadedImages = $this->fileUpload->upload($folder);                        return $this->dataReturn->json(["location"=>DefaultParam::ServerRoot.DefaultParam::FileUploadContainer.$folder."/".$uploadedImages[0]["name"]]);                    } catch (\Exception $e) {                        return $this->dataReturn->errorResponse(400, $e->getMessage());                    }            }        return $this->dataReturn->errorResponse(401);    }}